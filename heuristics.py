import yara


class Heuristics(object):
  """
  Heuristics used to evaluate a set of Yara rules and compute the rank
  """
  def __init__(self, rule_set="default", rules=None):
    self.rule_set = rule_set
    if rule_set == "default":  # Load the default rules for the analysis
      self.rules = yara.compile("rules/generic.yara")
    elif rule_set == "custom":  # Load custom user submitted rules
      self.rules = yara.compile(source=rules)

  def run(self, data):
    matches = self.rules.match(data=data)
    if "main" not in matches:  # No rule is matching the result
      return 0, []
    matches = filter(lambda x: x["matches"], matches["main"])
    for match in matches:
      strings = []
      # Filter the matched strings/bytes because the Yara regular expressions are non-greedy
      # and match also all substrings which we don't want
      for string in match["strings"]:
        if not any([x["data"].endswith(string["data"]) and (len(x["data"])-len(string["data"])) == string["offset"]-x["offset"] for x in strings]):
          strings.append(string)
      match["strings"] = strings
    # Compute a final rank for  the matched rules
    # Weight of each rule is 1 by default unless it is set in meta section of the rule
    rank = sum([x["meta"].get("weight", 1)*len(x["strings"]) for x in matches])
    return rank, matches
